
// Package symbols is generated by gogll. Do not edit.
package symbols

import(
	"bytes"
	"fmt"
)

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_Data NT = iota
	NT_DataList 
	NT_FuncCall 
	NT_Import 
	NT_Number 
	NT_Operation 
	NT_Orion 
	NT_Package 
	NT_Statement 
	NT_Statements 
	NT_String 
	NT_Variable 
	NT_VariableDef 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // ( 
	T_1  // ) 
	T_2  // , 
	T_3  // := 
	T_4  // block_comment 
	T_5  // float 
	T_6  // get 
	T_7  // ident 
	T_8  // integer 
	T_9  // line_comment 
	T_10  // op 
	T_11  // package 
	T_12  // string_lit 
)

type Symbols []Symbol

func (ss Symbols) Equal(ss1 Symbols) bool {
	if len(ss) != len(ss1) {
		return false
	}
	for i, s := range ss {
		if s.String() != ss1[i].String() {
			return false
		}
	}
	return true
}

func (ss Symbols) String() string {
	w := new(bytes.Buffer)
	for i, s := range ss {
		if i > 0 {
			fmt.Fprint(w, " ")
		}
		fmt.Fprintf(w, "%s", s)
	}
	return w.String()
}

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

// IsNT returns true iff sym is a non-terminal symbol of the grammar
func IsNT(sym string) bool {
	_, exist := stringNT[sym]
	return exist
}

// ToNT returns the NT value of sym or panics if sym is not a non-terminal of the grammar
func ToNT(sym string) NT {
	nt, exist := stringNT[sym]
	if !exist {
		panic(fmt.Sprintf("No NT: %s", sym))
	}
	return nt
}

var ntToString = []string { 
	"Data", /* NT_Data */
	"DataList", /* NT_DataList */
	"FuncCall", /* NT_FuncCall */
	"Import", /* NT_Import */
	"Number", /* NT_Number */
	"Operation", /* NT_Operation */
	"Orion", /* NT_Orion */
	"Package", /* NT_Package */
	"Statement", /* NT_Statement */
	"Statements", /* NT_Statements */
	"String", /* NT_String */
	"Variable", /* NT_Variable */
	"VariableDef", /* NT_VariableDef */ 
}

var tToString = []string { 
	"(", /* T_0 */
	")", /* T_1 */
	",", /* T_2 */
	":=", /* T_3 */
	"block_comment", /* T_4 */
	"float", /* T_5 */
	"get", /* T_6 */
	"ident", /* T_7 */
	"integer", /* T_8 */
	"line_comment", /* T_9 */
	"op", /* T_10 */
	"package", /* T_11 */
	"string_lit", /* T_12 */ 
}

var stringNT = map[string]NT{ 
	"Data":NT_Data,
	"DataList":NT_DataList,
	"FuncCall":NT_FuncCall,
	"Import":NT_Import,
	"Number":NT_Number,
	"Operation":NT_Operation,
	"Orion":NT_Orion,
	"Package":NT_Package,
	"Statement":NT_Statement,
	"Statements":NT_Statements,
	"String":NT_String,
	"Variable":NT_Variable,
	"VariableDef":NT_VariableDef,
}
